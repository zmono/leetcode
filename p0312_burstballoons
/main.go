// 312. Burst Balloons
// https://leetcode.com/problems/burst-balloons/description/

package main

import (
	"fmt"
	"reflect"
)

type TestCase struct {
	input  []int
	output int
}

func Max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func maxCoins(N []int) int {
	N = append(append([]int{1}, N...), 1)
	memo := make([][]int, len(N))
	for i := range memo {
		memo[i] = make([]int, len(N))
	}
	return burst(memo, N, 0, len(N)-1)
}

func burst(memo [][]int, N []int, l, r int) (coins int) {
	if l+1 == r {
		return 0
	}
	if memo[l][r] > 0 {
		return memo[l][r]
	}
	for i := l + 1; i < r; i++ {
		coins = Max(coins, burst(memo, N, l, i)+N[l]*N[i]*N[r]+burst(memo, N, i, r))
	}
	memo[l][r] = coins
	return
}

func main() {
	cases := []TestCase{
		{[]int{1, 1, 1}, 3},
		{[]int{77, 95, 58, 55}, 709687},
		{[]int{27, 97, 58, 31, 8, 15, 25, 96, 41, 24, 53, 76, 79, 81, 44, 77, 95, 58, 55}, 6120373},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2420},
		{[]int{3, 1, 5, 8}, 167},
		{[]int{2, 3, 5, 8}, 192},
		{[]int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 72},
		{[]int{27, 97, 58, 31, 8, 15, 25, 96, 41, 24, 53, 76, 79, 81, 44, 77, 95, 58, 55, 63, 96, 56, 77, 77, 67, 18, 86, 7, 18, 86, 85, 97, 26, 65, 97, 42, 42, 12, 37, 45, 76, 14, 52, 72, 13, 93, 91, 76, 53, 74, 93, 50, 0, 100, 92, 82, 37, 87, 14, 55, 70, 69, 15, 81, 57, 40, 37, 2, 1, 68, 85, 98, 72, 44, 26, 65, 74, 47, 71, 84, 98, 95, 86, 16, 62, 24, 90, 94, 5, 51, 21, 8, 3, 62, 33, 7, 78, 62, 94, 78, 89, 88, 13, 94, 39, 38, 19, 93, 62, 47, 80, 7, 26, 75, 58, 61, 63, 40, 8, 81, 72, 84, 39, 96, 51, 53, 55, 57, 29, 93, 15, 98, 30, 69, 23, 76, 42, 67, 17, 66, 23, 24, 31, 92, 71, 40, 55, 31, 86, 25, 79, 72, 73, 21, 24, 91, 61, 28, 100, 46, 37, 51, 96, 13, 25, 29, 71, 96, 18, 67, 11, 76, 56, 84, 0, 12, 49, 71, 51, 10, 39, 98, 85, 40, 23, 65, 67, 93, 69, 38, 75, 75, 56, 55, 54, 30, 19, 86, 31, 25, 97, 68, 9, 21, 83, 30, 52, 77, 6, 51, 63, 17, 38, 39, 56, 2, 56, 60, 32, 38, 50, 43, 59, 4, 1, 46, 35, 35, 46, 41, 30, 61, 51, 22, 84, 95, 91, 0, 36, 69, 5, 74, 82, 37, 91, 19, 51, 29, 39, 23, 70, 79, 72, 17, 72, 22, 88, 73, 48, 32, 11, 15, 48, 4, 55, 35, 100, 71, 77, 15, 6, 89, 4, 62, 6, 0, 95, 59, 90, 66, 74, 17, 42, 31, 64, 77, 18, 24, 100, 65, 89, 47, 72, 76, 1, 28, 23, 19, 20, 82, 83, 65, 72, 21, 68, 34, 47, 56, 99, 44, 18, 85, 30, 95, 22, 63, 46, 54, 100, 42, 18, 25, 49, 37, 95, 70, 44, 52, 86, 7, 53, 93, 34, 63, 68, 7, 76, 6, 34, 26, 50, 83, 60, 25, 55, 76, 65, 58, 26, 86, 75, 90, 8, 57, 23, 26, 53, 47, 68, 55, 62, 56, 1, 15, 92, 65, 30, 35, 82, 78, 29, 98, 15, 53, 30, 28, 63, 13, 88, 81, 51, 89, 93, 81, 2, 18, 70, 82, 61, 85, 89, 65, 85, 43, 37, 43, 79, 14, 51, 25, 45, 88, 48, 73, 80, 7, 11, 91, 89, 59, 43, 30, 18, 19, 73, 31, 95, 5, 14, 98, 64, 30, 36, 45, 79, 92, 0, 39, 43, 84, 47, 77, 77, 76, 85, 88, 32, 79, 27, 29, 53, 93, 73, 79, 59, 50, 80, 30, 25, 10, 89, 46, 17, 33, 68, 61, 19, 23, 17, 22, 75, 39, 18, 31, 48, 78, 99, 18, 60, 71, 14, 52, 39, 46, 37, 20, 39, 50, 38, 87, 96, 16, 74, 33, 76, 75, 0, 42, 5, 68, 48, 41, 26, 99, 3, 53, 99, 31, 63, 57}, 189254531},
	}
	for _, c := range cases {
		// fmt.Println(c)
		copy := append([]int{}, c.input...)
		if output := maxCoins(copy); !reflect.DeepEqual(output, c.output) {
			fmt.Printf("maxCoins(%v) == %v != %v\n", c.input, output, c.output)
		}
	}
}

/*

2 3 5 8
    * 120
2 3 8
  * 48
2 8
* 16
8
* 8
= 120 + 48 + 16 + 8 = 192

77 95 58 55
   * 424270
77 58 55
   * 245630
77 55
   * 4235
77
* 77
= 674212

77 95 58 55
      * 303050
77 95 55
   * 402325
77 55
   * 4235
77
* 77
= 709687

*/
