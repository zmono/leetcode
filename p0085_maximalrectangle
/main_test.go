// 85. Maximal Rectangle
// https://leetcode.com/problems/maximal-rectangle/

package main

import (
	"reflect"
	"testing"
)

type TestCase struct {
	input  [][]byte
	output int
}

func TestMaximalRectangle(t *testing.T) {
	cases := []TestCase{
		{[][]byte{}, 0},
		{[][]byte{[]byte("")}, 0},
		{[][]byte{[]byte("   ")}, 0},
		{[][]byte{[]byte(" 1  11 111 1")}, 3},
		{[][]byte{
			[]byte(" "),
			[]byte("1"),
			[]byte("1"),
			[]byte("1"),
			[]byte(" "),
			[]byte("1"),
			[]byte("1"),
			[]byte(" "),
		}, 3},
		{[][]byte{
			[]byte(" 11"), // [[     ] [[1 1]      ] [[1 2]      ]]
			[]byte("111"), // [[[1 1]] [[2 1] [1 2]] [[2 2] [1 3]]]
			[]byte("111"), // [[[2 1]] [[3 1] [2 2]] [[3 2] [2 3]]]
		}, 6},
		{[][]byte{
			[]byte(" 11 1"),
			[]byte("11 1 "),
			[]byte(" 111 "),
			[]byte("1111 "),
			[]byte("11111"),
			[]byte("     "),
		}, 9},
		{[][]byte{
			[]byte("    1   "), //           1,1
			[]byte("  1111  "), // 1,1  1,2  1,3/2,1  1,4
			[]byte("        "),
		}, 4},
		{[][]byte{
			[]byte("   111  "), //      1,1        1,2      1,3
			[]byte("  11111 "), // 1,1  1,2/2,1    1,3/2,2  1,4/2,3  1,5
			[]byte("    111 "), //                 3,1      3,2      2,3
		}, 6},
		{[][]byte{
			[]byte("           "),
			[]byte("   1111    "), // 1,1  1,2  1,3  1,4
			[]byte("   11111   "), // 2,1  2,2  2,3  2,4  1,5
			[]byte("     1     "), //           3,1
		}, 8},
		{[][]byte{
			[]byte("   1   1    11"),
			[]byte("1 111   1111  "),
			[]byte("11111 1 11111 "),
			[]byte("1  1  1   11  "),
		}, 8},
		{[][]byte{
			[]byte("   1 1 "),
			[]byte(" 1     "),
			[]byte(" 1 1  1"),
			[]byte("  11  1"),
			[]byte("111111 "),
			[]byte("1  1 11"),
			[]byte(" 1  1 1"),
			[]byte("11 111 "),
			[]byte("1 1 1 1"),
			[]byte("111    "),
		}, 6},
		{[][]byte{
			[]byte("11111111111111 1  11111111  111 11111111"),
			[]byte("1111 11 111111111 11 11111 1111111111111"),
			[]byte(" 1111 1 111111 11 11 11 1111111111111111"),
			[]byte(" 1 11 1 111111111111 1111111 1 11 111111"),
			[]byte("111111111111 11111 11  1 111111111111111"),
			[]byte("111111111 11 1 11111111111 1 111111 1111"),
			[]byte(" 11 11 1 111  1111111111111111 11111 1 1"),
			[]byte(" 1111111111111  1111111  11  11 11 1 1 1"),
			[]byte("1111 1111 111111111 11 11 1111 1 11 1 11"),
			[]byte("111111111 1111111111 11 11 111 1111 1111"),
			[]byte("111 11  111111111111  111111111111111111"),
			[]byte("1 1111111 1111 1111  111 111111111111111"),
			[]byte(" 11 1111111111111 111111 111 11111 11111"),
			[]byte("1111111111111111 1111111111111 111111 11"),
			[]byte("11111  11111111 1 11  1111111111111 1111"),
			[]byte("11111 111111111 111111 11111111111 11111"),
			[]byte("11111 1111111111111111 11  111111  11111"),
			[]byte("111111 111111111 1111111111111 11111 111"),
			[]byte("1 11111111111111 1 11111  1 11111 111111"),
			[]byte("111111  1111111111111 111111111111111 11"),
			[]byte("111111111111111111 111 11111 11111 11 11"),
			[]byte("11   11 11111111111111 11111 11111111111"),
			[]byte("11111 1 111111111111 11  1 111  11111111"),
			[]byte("111  1 111111111111 11 1111 1111 11111 1"),
			[]byte("11111111111111 11 11111111111 1111111111"),
			[]byte("1111111 111111 1111 1111111111111 111111"),
			[]byte("111  1111111111 111 1111111111 11111 111"),
			[]byte("11111111111111  111111 1 11111111111 111"),
			[]byte("1111111111111111111111   111111111 111 1"),
			[]byte("111111 1111111111111111111 11  111 11 11"),
			[]byte("1111 11 111111 11 11 111111 1111111 1111"),
			[]byte("1111111111 11111111111111111111111111111"),
			[]byte("1111111111111111111111111111111111111111"),
			[]byte("11   1111111111 1111111111111 1111111 11"),
			[]byte("11111 11111111 1111 1 111111111111111111"),
			[]byte(" 11111111111  1111111111 1 1 11 11111111"),
			[]byte("1 11 111111 11111111111 111111111111  11"),
			[]byte("1 1 11111111111111111111111111111  11111"),
			[]byte(" 1111 1111 1111111111111111111 111111111"),
			[]byte(" 111111 11111111 111 1111 111 1111111111"),
			[]byte(" 11111111111 1 1111 111111 1 11  1111 11"),
			[]byte("1111111111111 1111 1111111 11111111 111 "),
			[]byte("11111 11111111  11111111111 111111  1111"),
			[]byte("11 11 111111 1 11111 11111111  111 1 1  "),
			[]byte(" 11 1111111  11111  1 11111 111 11 111 1"),
		}, 114},
	}
	for _, c := range cases {

		if output := MaximalRectangle(c.input); !reflect.DeepEqual(output, c.output) {
			t.Errorf("MaximalRectangle(%v) == %v != %v\n", c.input, output, c.output)
		}
	}
}
